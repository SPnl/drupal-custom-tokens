<?php

function custom_tokens_cron() {
}

function custom_tokens_token_info() {
  $info['tokens']['current-page']['encoded-url'] = array(
    'name' => t('Encoded URL'),
    'description' => t('Encoded URL of the current page.'),
  );
  $info['tokens']['current-page']['encoded-title'] = array(
    'name' => t('Encoded title'),
    'description' => t('Encoded title of the current page.'),
  );

  $info['types']['custom'] = array(
    'name' => t('Custom tokens'),
    'description' => t('Custom tokens.'),
  );
  if (module_exists('webform')) {
    $webform_info = custom_tokens_get_webform_info();
    foreach ($webform_info as $webform_id => $webform_info) {
      $info['tokens']['custom']['webform_submission_count_' . $webform_id] = array(
        'name' => t('Count webform "' . $webform_info['title'] . '" (' . $webform_id . ')'),
      );
    }
  }
  if (module_exists('procapi')) {
    $groups = variable_get('custom_tokens_civi_groups', array());
    $selection_list = procapi_selection_get_list();
    foreach ($selection_list as $selection_info) {
      $info['tokens']['custom']['custom_tokens_selection_'.$selection_info['id']] = array(
        'name' => t('Count selection "' . $selection_info['name'] . '" (' . $selection_info['id'] . ')'),
      );
    }
  }

  return $info;
}

function custom_tokens_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $sanitize = !empty($options['sanitize']);

  $url_options = array('absolute' => TRUE);
  if (isset($options['language'])) {
    $url_options['language'] = $options['language'];
    $language_code = $options['language']->language;
  }
  else {
    $language_code = NULL;
  }

  switch ($type) { 
  case 'current-page':
    $current_path = current_path();
    $current_title = drupal_get_title();
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'encoded-url':
          $replacements[$original] = urlencode(url($current_path, $url_options));
          break;
        case 'encoded-title':
          $replacements[$original] = urlencode($current_title);
          break;
      }
    }
    break;
  case 'custom':
    $webform_counts = custom_tokens_get_webform_submissions_counts(); 
    $selection_counts = custom_tokens_get_selection_counts();
    foreach ($tokens as $name => $original) {
      preg_match('/^webform_submission_count_([0-9]+)$/', $name, $matches);
      if (!empty($matches[1]) && !empty($webform_counts[$matches[1]])) {
        $replacements[$original] = $webform_counts[$matches[1]];
      }
      preg_match('/^custom_tokens_selection_([0-9]+)$/', $name, $matches);
      if (!empty($matches[1]) && !empty($selection_counts[$matches[1]])) {
        $replacements[$original] = $selection_counts[$matches[1]];
      }
    }
    break;
  }
  return $replacements;
}

function custom_tokens_get_webform_info() {
  $webform_info = &drupal_static(__FUNCTION__);
  if (!isset($webform_info)) {
    if ($cache = cache_get('custom_tokens_webform_ids')) {
      $webform_info = $cache->data;
    }
    else {
      $webform_node_types = webform_variable_get('webform_node_types');
      $webform_info = array();
      $query = new EntityFieldQuery();

      $result = $query
        ->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', $webform_node_types, 'IN')
        ->execute();

      if (!empty($result['node'])) {
        foreach ($result['node'] as $node_id => $values) {
          $node = node_load($node_id);
          $webform_info[$node_id] = array(
            'nid' => $node->nid,
            'title' => $node->title,
          );
        }
        cache_set('custom_tokens_webform_ids', $webform_info, 'cache', time() + 360);
      }
    }
  }
  return $webform_info;
}

function custom_tokens_get_webform_submissions_counts() {
  $counts = &drupal_static(__FUNCTION__);
  if (!isset($counts)) {
    if ($cache = cache_get('custom_tokens_webform_counts')) {
      $counts = $cache->data;
    }
    else {
      $counts = array();
      $webform_info = custom_tokens_get_webform_info();
      $query = "SELECT COUNT(*) FROM {webform_submissions} WHERE nid = :nid AND submitted IS NOT NULL";
      foreach ($webform_info as $webform_id => $info) {
        $result = db_query($query, array(':nid' => $webform_id));
        $count = $result->fetchField(0);
        $count = custom_tokens_round($count);
        $counts[$webform_id] = $count;
      }
      cache_set('custom_tokens_webform_counts', $counts, 'cache', time() + 360);
    }
  }
  return $counts;
}

function custom_tokens_get_selection_counts() {
  $counts = &drupal_static(__FUNCTION__);
  if (!isset($counts)) {
    if ($cache = cache_get('custom_tokens_selection_counts')) {
      $counts = $cache->data;
    }
    else {
      $counts = array();

      if (module_exists('procapi')) {
        $selection_list = procapi_selection_get_list();
        foreach ($selection_list as $selection_info) {
          $counts[$selection_info['id']] = custom_tokens_round($selection_info['numberOfRelations']);
        }
      }
      cache_set('custom_tokens_selection_counts', $counts, 'cache', time() + 360);
    }
  }
  return $counts;
}

function custom_tokens_round($count) {
/*
  if ($count > 100 && $count < 1000) {
    $count = 10 * (floor($count/10));
  }
  else if ($count > 1000 && $count < 10000) {
    $count = 100 * (floor($count/100));
  }
  else if ($count > 10000) {
    $count = 1000 * (floor($count/1000));
  }
  return number_format($count, 0, '', '.');
*/
  return $count;
}
